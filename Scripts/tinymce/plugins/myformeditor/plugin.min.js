(function () {

    ////////////////////////////////////////////////////////////////////////
    // NOTE: IF YOU EDIT THIS FILE
    // You must also update editor_plugin.js with a minified version.
    ////////////////////////////////////////////////////////////////////////
    tinymce.create('tinymce.plugins.EXPEDIT.MyFormEditor', {
        /**
        * Initializes the plugin, this will be executed after the plugin has been created.
        * This call is done before the editor instance has finished it's initialization so use the onInit event
        * of the editor instance to intercept that event.
        *
        * @param {tinymce.Editor} ed Editor instance that the plugin is initialized in.
        * @param {string} url Absolute URL to where the plugin is located.
        */    
        init: function (ed, url) {
            // Register the command so that it can be invoked by using tinyMCE.activeEditor.execCommand('mceMediaPicker');
            ed.addCommand('mceMyFormEditor', function () {
                ed.focus();            
                var url = "/Share/PickFile/";
                $.colorbox({
                    href: url,
                    iframe: true,
                    reposition: true,
                    width: "90%",
                    height: "90%",
                    onLoad: function() {
                        // hide the scrollbars from the main window
                        $('html, body').css('overflow', 'hidden');
                        //$('#cboxClose').remove();
                    },
                    onClosed: function() {
                        $('html, body').css('overflow', '');

                        var selectedData = $.colorbox.selectedData;

                        if (selectedData == null) // Dialog cancelled, do nothing
                            return;

                        
                        var div = $('<div>').attr({
                            'id' : NewGUID(),
                            'data-json': JSON.stringify(selectedData[i]),
                            'class': 'tiny tiny-form mceNonEditable disable-user-select',
                            'type': 'tiny-form'
                        });
                        window.renderFunctions(div);
              

                        $.colorbox.selectedData = null;

           
                        // extra dev code  
                        tinyMCE.execCommand('mceReplaceContent', false, newContent[0].get(0).outerHTML + "&nbsp;");
              
                    }
                });
            });

            // Register media button
            ed.addButton('myformeditor', {
                title: jQuery("#" + ed.id).data("myformeditor-title"), //ed.getParam("mediapicker_title"),
                cmd: 'mceMyFormEditor',
                image: url + '/img/picture_add.png'
            });

            $('#colorbox,#cboxOverlay,#cboxWrapper').css('z-index', '99999999999999999');


            // Run extra dev code
            ed.on('ExecCommand', function (e) {
                window.renderFunction['tiny-form-editor'](e);
            });


        },
            
        createControl: function (n, cm) {
            return null;
        },

        /**
        * Returns information about the plugin as a name/value array.
        * The current keys are longname, author, authorurl, infourl and version.
        *
        * @return {Object} Name/value array containing information about the plugin.
        */
        getInfo: function () {
            return {
                longname: 'EXPEDIT MyFormEditor Plugin',
                author: 'Andrew Grosser & Paul Knittel',
                authorurl: 'http://expedit.com.au',
                infourl: 'http://expedit.com.au',
                version: '0.1'
            };
        }
    });

    // Register plugin
    tinymce.PluginManager.add('myformeditor', tinymce.plugins.EXPEDIT.MyFormEditor);




    window.cleanFunctions = function (selected) {
        $selected = $(selected);
  
        TraverseDom($selected, function (e) {
            if (e.hasClass('tiny'))
                e.empty()
            if (e.hasClass('tiny-popover'))
                e.remove();
        });

        $selected = $selected.filter(':not(.tiny-popover)');

        return $selected;
    }




    if (typeof window.renderFunctions === 'undefined') {
        window.renderFunctions = function (selector) {
            selector.find('*').andSelf().filter('.tiny').each(function () {
                var $this = $(this)
                var type = $this.attr('type');
                window.renderFunction[type]($this);
            })
        }
    }


    if (typeof window.renderFunction === 'undefined')
        window.renderFunction = {};
    

    // Template to convert JSON to html form...
    window.renderFunction['tiny-form'] = function (selected) {
    
        var json = selected.data('json');

        selected.append($('<img>').attr({
            src: "/share/preview/" + json.refid + ((typeof json.width === 'undefined' || json.width == null || json.width < 1 || json.width > 600) ? "" : "?width=" + json.width),
            width: json.width
        }));

        selected.append($('<br/>'));

        selected.append($('<a>').attr({
            href: "/share/file/" + json.refid
        }).html(json.name));
        
    }

    // This is extra code run inside tinymce to allow editing of the form
    window.renderFunction['tiny-form-editor'] = function (e) {
        if (typeof e !== 'undefined' && typeof e.target !== 'undefined' && typeof e.target.editorContainer !== 'undefined' && e.target.editorContainer) {
            var currentDocument = $(tinymce.activeEditor.contentDocument);
            currentDocument.find('*').andSelf().filter('.tiny').each(function (i, selected) {
                var json = $(selected).data('json');
                
                //tinymce.activeEditor.contentDocument.getElementById(selected.id).onclick = function (e) {
                $(selected).click(function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    var children = currentDocument.find('.tiny-popover');
                    var found = (currentDocument.find('#pop-' + selected.id).length > 0);
                    if (children.length > 0) {
                        children.remove();
                    }
                    if (!found) {
                        var html = '';
                        html += '<div id="pop-' + selected.id + '" class="tiny-popover disable-user-select fade bottom in" role="tooltip" style="bottom: 0px; left: 0px; top: initial; display: block;"><div class="arrow"></div>';
                        html += '<div class="popover-content">';
                        html += '<div class="btn-group">';
                        html += '<button id="sml-' + selected.id + '" type="button" class="btn btn-default tiny-popover-shrink"><span class="icon icon-picture"></span></button>';
                        html += '<button id="lge-' + selected.id + '" type="button" class="btn btn-default tiny-popover-grow"><span class="icon icon-picture icon-large"></span></button>';
                        html += '</div>';
                        html += '</div></div>';
                        // extra click handlers necessary here to update the json on selected.
                        $(e.currentTarget).closest('div[id="' + selected.id + '"]').after($(html)[0]); //TODO BUG: need to append after id...
                        $(e.currentTarget).parent().find('#sml-' + selected.id).click(function (ev) {
                            var id = ev.currentTarget.id.substr(4);
                            var parent = $(e.currentTarget).closest('div[id="' + id + '"]');
                            var json = parent.data().json;
                            json.width = 300;
                            parent.attr({ 'data-json': JSON.stringify(json) });
                            window.cleanFunctions(parent);
                            window.renderFunction['tiny-img'](parent);
                        });
                        $(e.currentTarget).parent().find('#lge-' + selected.id).click(function (ev) {
                            var id = ev.currentTarget.id.substr(4);
                            var parent = $(e.currentTarget).closest('div[id="' + id + '"]');
                            var json = parent.data().json;
                            json.width = 600;
                            parent.attr({ 'data-json': JSON.stringify(json) });
                            window.cleanFunctions(parent);
                            window.renderFunction['tiny-img'](parent);
                        });
                    }
                }
                );

            });
        }
    }
})();

