(function () {
    
    // Template to convert JSON to html form...
    window.renderFunction['tiny-form'] = function (selected) {
        var formData = selected.data('json');
        var formID = 'frm-' + formData.id;

        var $form = $('<form>').attr({
            id: formID
        })

        $.each(formData.fields, function (i, d) {
            var source = $("#temp-" + d.field_type).html();
            var template = Handlebars.compile(source);
            var html = template(d);
            $form.append(html);
        })

        $form.append($('<div>').attr({
            class: 'btn btn-primary tiny-form-submit'
        }).html('submit'))
        var form = $form[0].outerHTML;

        var source = $("#form-tabs").html();
        var template = Handlebars.compile(source);
        var htmlTabs = template({ outlet: form, id: formID, heading: formData.heading });




        selected.html(htmlTabs);
    }


    window.renderFunction['tiny-form-trigger'] = function (selected) {
        selected.find('.nav-tabs a').click(function (e) {
            e.preventDefault();
            $(this).tab('show');

            // Render Datatables
            var $results = selected.find('.form-results');
            var id = $results.data('id');


            var a = $.ajax('/share/user/forms/' + id.substring(4))


            a.success(function (a) {
                if (a.length == 0) {
                    if (isLoggedIn())
                        $results.html("<h4>No results.</h4>");
                    else
                        $results.html("<h4>Login to see results.</h4>");
                    return;
                }
                var k = [];                
                Enumerable.From(a).ForEach(function (f) { var y = JSON.parse(f.FormData); Enumerable.From(y).ForEach(function (g) { k.push(g.name) }); });
                var cols = Enumerable.From(k).Distinct().ToArray();
                cols.push('Updated');
                cols.push('Updated By');
                var txt = "f=> {";
                $(cols).each(function (i, f) { if (i > 0) txt = txt + ",'" + f + "': f['" + f + "']"; else txt = txt + "'" + f + "': f['" + f + "']"; });
                txt += "}";
                var y = Enumerable.From(a).Select(function (f) { var r = {}; var g = JSON.parse(f.FormData); $(g).each(function (i, z) { r[z.name] = z.value }); r['Updated'] = f.Updated; r['Updated By'] = f.UpdatedBy; return r; }).ToArray();
                var data = Enumerable.From(y).Select(txt).ToArray();
                

                var yData = cols.map(function (aws) { return { data: aws, defaultContent: '<i>no result</i>' } })


                var colsNice = cols.map(function(lol){
                    return lol.replace(/[a-zA-Z0-9-]*-/ig,'')
                })
                var source = $("#form-table-setup").html();
                var template = Handlebars.compile(source);
                var tableSetup = template({ id: NewGUID(), array: colsNice });

                // Create a new table
                $results.empty().html(tableSetup);

                // Get new results for table
                $results.find('table').dataTable({
                    responsive: true,
                    "data": y,
                    "columns": yData
                       // defaultContent: ''
              
                });

            });

            a.fail(function (a) {
                $results.html("<h4>You need permission to view the results.</h4>");
                return;
            });
        })


        selected.find('.tiny-form-submit').click(function (e) {
            var $this = $(this);
            var $form = $this.closest('form');

            

            if (typeof $form.data('bootstrapValidator') === 'undefined') {
                $form.bootstrapValidator();
            }

            var validator = $form.data('bootstrapValidator');
            validator.validate();
            if (validator.isValid()) {

                // let's select and cache all the fields
                var $inputs = $form.find("input, select, button, textarea, hidden");
                // serialize the data in the form

                var serializedData = {
                    FormData: $form.serializeArray(),
                    FormJSON: $form.closest('.tiny-form').data('json')
                }

                serializedData.FormJSON.origin = window.location.href;

                // let's disable the inputs for the duration of the ajax request
                $inputs.prop("disabled", true);

                // fire off the request to /form.php
                request = $.ajax({
                    url: '/share/forms',
                    type: "post",                    
                    data: encodeURIComponent(JSON.stringify(serializedData))
                });

                // callback handler that will be called on success
                request.done(function (response, textStatus, jqXHR) {
                    // log a message to the console
                    Messenger().post({ type: 'success', message: 'The form has been submitted successfully.' });
                    $form[0].reset();
                    $form.data('bootstrapValidator').resetForm();
                });

                // callback handler that will be called on failure
                request.fail(function (jqXHR, textStatus, errorThrown) {
                    // log the error to the console
                    Messenger().post({ type: 'error', message: 'Error submitting form. Please try again.' });
                    //alertify.error("The following error occured: " + textStatus, errorThrown);                    
                });

                // callback handler that will be called regardless
                // if the request failed or succeeded
                request.always(function () {
                    // reenable the inputs
                    $inputs.prop("disabled", false);
                });

            }
        })
    }

    // This is extra code run inside tinymce to allow editing of the form
    window.renderFunction['tiny-form-editor'] = function (e) {
        if (typeof e !== 'undefined' && typeof e.target !== 'undefined' && typeof e.target.editorContainer !== 'undefined' && e.target.editorContainer) {
            var currentDocument = $(tinymce.activeEditor.contentDocument);
            currentDocument.find('*').andSelf().filter('.tiny').each(function (i, selected) {
                
                if ($(selected).attr('type') === 'tiny-form') {

                    // Setup click trigger
                    $(selected).click(function (e) {
                        $this = $(this);
                        
                        e.preventDefault();
                        e.stopPropagation();
                        e.stopImmediatePropagation();



                        $.colorbox.selectedData = $this.data('json');
                        var url = "/Modules/EXPEDIT.Share/Scripts/formbuilderjs/index.html";
                        $.colorbox({
                            href: url,
                            iframe: true,
                            reposition: true,
                            width: "90%",
                            height: "90%",
                            onLoad: function () {
                                // hide the scrollbars from the main window
                                $('html, body').css('overflow', 'hidden');
                                //$('#cboxClose').remove();
                            },
                            onClosed: function () {
                                $('html, body').css('overflow', '');

                                var selectedData = $.colorbox.selectedData;

                                if (selectedData == null) // Dialog cancelled, do nothing
                                    return;


                                var oldData = $this.data('json');
                                var selected = selectedData;

                                selected.fields.forEach(function(a){ 
                                    a.uid = NewGUID();
                                })
                                
                                var newData = $.extend(oldData, selected);

                                // Set new JSON
                                $this.attr({'data-json': JSON.stringify(newData)});


                                //console.log($this.data('json'))
                                // Rerender template
                                window.renderFunction['tiny-form']($this);

                                $.colorbox.selectedData = null;

                                
                            }
                        });
                    });
                }
                

            });
        }
    }


        



})();

