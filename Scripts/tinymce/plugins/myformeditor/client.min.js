(function () {
    


    if (typeof window.renderFunctions === 'undefined') {
        window.renderFunctions = function (selector) {
            selector.find('*').andSelf().filter('.tiny').each(function () {
                var $this = $(this)
                var type = $this.attr('type');
                window.renderFunction[type]($this);
                var trigFn = window.renderFunction[type + '-trigger'];
                if (typeof trigFn !== 'undefined') {
                    trigFn($this);
                }
            })
        }
    }



    window.cleanFunctions = function (selected) {
        $selected = $(selected);

        TraverseDom($selected, function (e) {
            if (e.hasClass('tiny'))
                e.empty()
            if (e.hasClass('tiny-popover'))
                e.remove();
        });

        $selected = $selected.filter(':not(.tiny-popover)');

        return $selected;
    }




    if (typeof window.renderFunctions === 'undefined') {
        window.renderFunctions = function (selector) {
            selector.find('*').andSelf().filter('.tiny').each(function () {
                var $this = $(this)
                var type = $this.attr('type');
                window.renderFunction[type]($this);
                var trigFn = window.renderFunction[type + '-trigger'];
                if (typeof trigFn !== 'undefined') {
                    trigFn($this);
                }
            })
        }
    }


    if (typeof window.renderFunction === 'undefined')
        window.renderFunction = {};


    // Template to convert JSON to html form...
    window.renderFunction['tiny-form'] = function (selected) {
        var formData = selected.data('json');
        var formID = 'frm-' + formData.id;

        var $form = $('<form>').attr({
            id: formID
        })

        $.each(formData.fields, function (i, d) {
            var source = $("#temp-" + d.field_type).html();
            var template = Handlebars.compile(source);
            var html = template(d);
            $form.append(html);
        })



        $form.append($('<div>').attr({
            class: 'btn btn-primary tiny-form-submit'
        }).html('submit'))

        selected.html($form);




    }


    window.renderFunction['tiny-form-trigger'] = function (selected) {
        selected.find('.tiny-form-submit').click(function (e) {
            var $this = $(this);
            var $form = $this.closest('form');

            

            if (typeof $form.data('bootstrapValidator') === 'undefined') {
                $form.bootstrapValidator();
            }

            var validator = $form.data('bootstrapValidator');
            validator.validate();
            if (validator.isValid()) {

                // let's select and cache all the fields
                var $inputs = $form.find("input, select, button, textarea, hidden");
                // serialize the data in the form
                var serializedData = $form.serialize();

                // let's disable the inputs for the duration of the ajax request
                $inputs.prop("disabled", true);

                // fire off the request to /form.php
                request = $.ajax({
                    url: '/test/',
                    type: "post",
                    data: serializedData,
                    dataType: 'json'
                });

                // callback handler that will be called on success
                request.done(function (response, textStatus, jqXHR) {
                    // log a message to the console
                    Messenger().post({ type: 'success', message: 'The form has been submitted successfully' });
                    $form.reset();
                });

                // callback handler that will be called on failure
                request.fail(function (jqXHR, textStatus, errorThrown) {
                    // log the error to the console
                    Messenger().post({ type: 'error', message: 'Error submitting form. Please try again.' });
                    //alertify.error("The following error occured: " + textStatus, errorThrown);                    
                });

                // callback handler that will be called regardless
                // if the request failed or succeeded
                request.always(function () {
                    // reenable the inputs
                    $inputs.prop("disabled", false);
                });

            }
        })
    }

    // This is extra code run inside tinymce to allow editing of the form
    window.renderFunction['tiny-form-editor'] = function (e) {
        alert(1)
        if (typeof e !== 'undefined' && typeof e.target !== 'undefined' && typeof e.target.editorContainer !== 'undefined' && e.target.editorContainer) {
            var currentDocument = $(tinymce.activeEditor.contentDocument);
            currentDocument.find('*').andSelf().filter('.tiny').each(function (i, selected) {
                var json = $(selected).data('json');

                //tinymce.activeEditor.contentDocument.getElementById(selected.id).onclick = function (e) {
                $(selected).click(function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    var children = currentDocument.find('.tiny-popover');
                    var found = (currentDocument.find('#pop-' + selected.id).length > 0);
                    if (children.length > 0) {
                        children.remove();
                    }
                    if (!found) {
                        var html = '';
                        html += '<div id="pop-' + selected.id + '" class="tiny-popover disable-user-select fade bottom in" role="tooltip" style="bottom: 0px; left: 0px; top: initial; display: block;"><div class="arrow"></div>';
                        html += '<div class="popover-content">';
                        html += '<div class="btn-group">';
                        html += '<button id="sml-' + selected.id + '" type="button" class="btn btn-default tiny-popover-shrink"><span class="icon icon-picture"></span></button>';
                        html += '<button id="lge-' + selected.id + '" type="button" class="btn btn-default tiny-popover-grow"><span class="icon icon-picture icon-large"></span></button>';
                        html += '</div>';
                        html += '</div></div>';
                        // extra click handlers necessary here to update the json on selected.
                        $(e.currentTarget).closest('div[id="' + selected.id + '"]').after($(html)[0]); //TODO BUG: need to append after id...
                        $(e.currentTarget).parent().find('#sml-' + selected.id).click(function (ev) {
                            var id = ev.currentTarget.id.substr(4);
                            var parent = $(e.currentTarget).closest('div[id="' + id + '"]');
                            var json = parent.data().json;
                            json.width = 300;
                            parent.attr({ 'data-json': JSON.stringify(json) });
                            window.cleanFunctions(parent);
                            window.renderFunction['tiny-img'](parent);
                        });
                        $(e.currentTarget).parent().find('#lge-' + selected.id).click(function (ev) {
                            var id = ev.currentTarget.id.substr(4);
                            var parent = $(e.currentTarget).closest('div[id="' + id + '"]');
                            var json = parent.data().json;
                            json.width = 600;
                            parent.attr({ 'data-json': JSON.stringify(json) });
                            window.cleanFunctions(parent);
                            window.renderFunction['tiny-img'](parent);
                        });
                    }
                }
                );

            });
        }
    }


        



})();

