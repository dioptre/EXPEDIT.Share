(function () {

    ////////////////////////////////////////////////////////////////////////
    // NOTE: IF YOU EDIT THIS FILE
    // You must also update editor_plugin.js with a minified version.
    ////////////////////////////////////////////////////////////////////////
    tinymce.create('tinymce.plugins.EXPEDIT.MyFilePicker', {
        /**
        * Initializes the plugin, this will be executed after the plugin has been created.
        * This call is done before the editor instance has finished it's initialization so use the onInit event
        * of the editor instance to intercept that event.
        *
        * @param {tinymce.Editor} ed Editor instance that the plugin is initialized in.
        * @param {string} url Absolute URL to where the plugin is located.
        */    
        init: function (ed, url) {
            // Register the command so that it can be invoked by using tinyMCE.activeEditor.execCommand('mceMediaPicker');
            ed.addCommand('mceMyFilePicker', function () {
                ed.focus();            
                var url = "/Share/PickFile/";
                $.colorbox({
                    href: url,
                    iframe: true,
                    reposition: true,
                    width: "90%",
                    height: "90%",
                    onLoad: function() {
                        // hide the scrollbars from the main window
                        $('html, body').css('overflow', 'hidden');
                        //$('#cboxClose').remove();
                    },
                    onClosed: function() {
                        $('html, body').css('overflow', '');

                        var selectedData = $.colorbox.selectedData;

                        if (selectedData == null) // Dialog cancelled, do nothing
                            return;

                        var newContent = [];
                        for (var i = 0; i < selectedData.length; i++) {
                            //var renderMedia = "/share/preview/" + selectedData[i].refid;
                            //var link = "/share/file/" + selectedData[i].refid;
                            //var name = selectedData[i].name;

                            // old embed code
                            // newContent += "<div class=\"locationpicker embed-media-article\"><div class=\"thumbnail\"><div class=\"media-thumbnail media-thumbnail-image mime-type-image-png\"><img src=\'" + renderMedia + "\'></div></div><div class=\"media-library-main-list-overlay\"><p class=\"title\"><a href=\'" + link + "\'>" + selectedData[i].name + "</a></p></div></div>&nbsp;";

                            //newContent += "<div class='embed-container'>"
                            //newContent +=    "<div class='embed-img' data-title='" + name + "'>"
                            //newContent +=        "<div class='embed-helper'>"
    	                    //newContent +=            "<img src='" + renderMedia + "'>"
    	                    //newContent +=            "<div class='embed-helper' data-title='" + name + "' data-file='" + renderMedia + "'></div>"
    	                    //newContent +=            "<a href='" + renderMedia + "' data-title='" + name + "' class='embed-download'></a>"
     	                    //newContent +=        "</div>"
     	                    //newContent +=    "</div>"
                            //newContent += "</div>"


                            var div = $('<div>').attr({
                                'id' : NewGUID(),
                                'data-json': JSON.stringify(selectedData[i]),
                                'class': 'dirty tiny tiny-img mceNonEditable',
                                'type': 'tiny-img'
                            });
                            window.renderFunctions(div);
                            newContent.push(div);
                        }
                        $.colorbox.selectedData = null;

                        
                        // reassign the src to force a refresh
                        tinyMCE.execCommand('mceReplaceContent', false, newContent[0].get(0).outerHTML + "&nbsp;");
              
                    }
                });
            });

            // Register media button
            ed.addButton('myfilepicker', {
                title: jQuery("#" + ed.id).data("myfilepicker-title"), //ed.getParam("mediapicker_title"),
                cmd: 'mceMyFilePicker',
                image: url + '/img/picture_add.png'
            });

            $('#colorbox,#cboxOverlay,#cboxWrapper').css('z-index', '99999999999999999');

            ed.on('ExecCommand', function (e) {
                window.renderFunction['tiny-img-editor'](e);
            });
        },

        /**
        * Creates control instances based in the incomming name. This method is normally not
        * needed since the addButton method of the tinymce.Editor class is a more easy way of adding buttons
        * but you sometimes need to create more complex controls like listboxes, split buttons etc then this
        * method can be used to create those.
        *
        * @param {String} n Name of the control to create.
        * @param {tinymce.ControlManager} cm Control manager to use inorder to create new control.
        * @return {tinymce.ui.Control} New control instance or null if no control was created.
        */
        createControl: function (n, cm) {
            return null;
        },

        /**
        * Returns information about the plugin as a name/value array.
        * The current keys are longname, author, authorurl, infourl and version.
        *
        * @return {Object} Name/value array containing information about the plugin.
        */
        getInfo: function () {
            return {
                longname: 'EXPEDIT MyFilePicker Plugin',
                author: 'Andrew Grosser',
                authorurl: 'http://expedit.com.au',
                infourl: 'http://expedit.com.au',
                version: '0.1'
            };
        }
    });

    // Register plugin
    tinymce.PluginManager.add('myfilepicker', tinymce.plugins.EXPEDIT.MyFilePicker);

    if (typeof window.cleanFunction === 'undefined')
        window.cleanFunction = {};

    window.cleanFunction['tiny-img'] = function () {
        $(' div.tiny.tiny-img').children().remove();
    }

    if (typeof window.renderFunctions === 'undefined') {
        window.renderFunctions = function (selector) {
            selector.find('*').andSelf().filter('.tiny').each(function () {
                var $this = $(this)
                var type = $this.attr('type');
                window.renderFunction[type]($this);
            })
        }
    }


    if (typeof window.renderFunction === 'undefined')
        window.renderFunction = {};
    
    window.renderFunction['tiny-img'] = function (selected) {

    
        var json = selected.data('json');

        
        selected.append($('<img>').attr({
            src: "/share/preview/" + json.refid,
            width: json.width
        }));


        selected.append($('<a>').attr({
            href: "/share/file/" + json.refid
        }).html(json.name));
        
    }

    window.renderFunction['tiny-img-editor'] = function (e) {
        if (typeof e !== 'undefined' && typeof e.target !== 'undefined' && typeof e.target.editorContainer !== 'undefined' && e.target.editorContainer) {
            $(e.target.target.activeEditor.contentDocument.firstElementChild).find('*').andSelf().filter('.tiny').each(function (i, selected) {
                selected.click(function (e) {
                    alert('hi');
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    var children = $(e.currentTarget.children).filter('.tiny.popover');
                    if (children.length > 0) {
                        children.empty();
                    }
                    else {
                        html += '<div class="tiny popover fade bottom in" role="tooltip" style="bottom: 0px; left: 0px; top: initial; display: block;"><div class="arrow"></div>';
                        html += '<div class="popover-content">';
                        html += '<div class="btn-group">';
                        html += '<button type="button" class="btn btn-default"><span class="icon icon-picture"></span></button>';
                        html += '<button type="button" class="btn btn-default"><span class="icon icon-picture icon-large"></span></button>';
                        html += '</div>';
                        html += '</div></div>';
                        // extra click handlers necessary here to update the json on selected.
                        e.currentTarget.appendChild($(html)[0]);
                    }
                });
            });
        }
        //.removeClass('dirty').click(window.renderFunction['tiny-img-popup']
    }
})();

